/* tslint:disable */
/* eslint-disable */
/**
 * SP2407 Nearby Stations API
 * 周辺のステーションの座標を取得し、各ステーションに対してRed/Greenチームに投票し、写真をアップロードするためのAPIです。
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: support@sp2407.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface PhotoUploadResponse
 */
export interface PhotoUploadResponse {
    /**
     * アップロードされた写真のURLリスト。
     * @type {Array<string>}
     * @memberof PhotoUploadResponse
     */
    'photoUrls'?: Array<string>;
}
/**
 * 
 * @export
 * @interface PhotosURLResponse
 */
export interface PhotosURLResponse {
    /**
     * ステーションにアップロードされた写真のURLリスト。
     * @type {Array<string>}
     * @memberof PhotosURLResponse
     */
    'photoUrls'?: Array<string>;
}
/**
 * 
 * @export
 * @interface PostStationVoteRequest
 */
export interface PostStationVoteRequest {
    /**
     * 投票するチームの名前。
     * @type {string}
     * @memberof PostStationVoteRequest
     */
    'team'?: PostStationVoteRequestTeamEnum;
    /**
     * 投票する点数。
     * @type {number}
     * @memberof PostStationVoteRequest
     */
    'points'?: number;
}

export const PostStationVoteRequestTeamEnum = {
    Red: 'Red',
    Green: 'Green'
} as const;

export type PostStationVoteRequestTeamEnum = typeof PostStationVoteRequestTeamEnum[keyof typeof PostStationVoteRequestTeamEnum];

/**
 * 
 * @export
 * @interface StationInformation
 */
export interface StationInformation {
    /**
     * ステーションのID。
     * @type {string}
     * @memberof StationInformation
     */
    '_id'?: string;
    /**
     * ステーションの名前。
     * @type {string}
     * @memberof StationInformation
     */
    'stationName'?: string;
    /**
     * 
     * @type {StationInformationCoordinates}
     * @memberof StationInformation
     */
    'coordinates'?: StationInformationCoordinates;
    /**
     * アップロードされた写真のURLリスト。
     * @type {Array<string>}
     * @memberof StationInformation
     */
    'photoUrls'?: Array<string>;
    /**
     * 
     * @type {StationInformationTotalVotes}
     * @memberof StationInformation
     */
    'totalVotes'?: StationInformationTotalVotes;
}
/**
 * 
 * @export
 * @interface StationInformationCoordinates
 */
export interface StationInformationCoordinates {
    /**
     * 
     * @type {number}
     * @memberof StationInformationCoordinates
     */
    'latitude'?: number;
    /**
     * 
     * @type {number}
     * @memberof StationInformationCoordinates
     */
    'longitude'?: number;
}
/**
 * 
 * @export
 * @interface StationInformationTotalVotes
 */
export interface StationInformationTotalVotes {
    /**
     * Redチームの総投票数。
     * @type {number}
     * @memberof StationInformationTotalVotes
     */
    'Red'?: number;
    /**
     * Greenチームの総投票数。
     * @type {number}
     * @memberof StationInformationTotalVotes
     */
    'Green'?: number;
}
/**
 * 
 * @export
 * @interface TeamProperties
 */
export interface TeamProperties {
    /**
     * チームのemoji。
     * @type {string}
     * @memberof TeamProperties
     */
    'emoji'?: string;
    /**
     * チームのお題。
     * @type {string}
     * @memberof TeamProperties
     */
    'theme'?: string;
}
/**
 * 
 * @export
 * @interface TeamsResponse
 */
export interface TeamsResponse {
    /**
     * チームを選ぶ際に表示される全体へのメッセージ。
     * @type {string}
     * @memberof TeamsResponse
     */
    'teamSelectionMessage'?: string;
    /**
     * 
     * @type {TeamProperties}
     * @memberof TeamsResponse
     */
    'Red'?: TeamProperties;
    /**
     * 
     * @type {TeamProperties}
     * @memberof TeamsResponse
     */
    'Green'?: TeamProperties;
}

/**
 * AdminApi - axios parameter creator
 * @export
 */
export const AdminApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 開発環境でデータベースをリセットします。すべてのデータが削除されます。
         * @summary データベースのリセット
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetDatabase: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/database/reset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminApi - functional programming interface
 * @export
 */
export const AdminApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminApiAxiosParamCreator(configuration)
    return {
        /**
         * 開発環境でデータベースをリセットします。すべてのデータが削除されます。
         * @summary データベースのリセット
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetDatabase(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetDatabase(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.resetDatabase']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AdminApi - factory interface
 * @export
 */
export const AdminApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminApiFp(configuration)
    return {
        /**
         * 開発環境でデータベースをリセットします。すべてのデータが削除されます。
         * @summary データベースのリセット
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetDatabase(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.resetDatabase(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdminApi - object-oriented interface
 * @export
 * @class AdminApi
 * @extends {BaseAPI}
 */
export class AdminApi extends BaseAPI {
    /**
     * 開発環境でデータベースをリセットします。すべてのデータが削除されます。
     * @summary データベースのリセット
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public resetDatabase(options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).resetDatabase(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 指定された場所の周辺にあるステーションの座標を返します。
         * @summary 周辺のステーションの座標を取得
         * @param {number} latitude 現在の場所の緯度。
         * @param {number} longitude 現在の場所の経度。
         * @param {number} [radius] ステーションを検索する半径（メートル単位）。デフォルトは1000メートルです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNearbyStations: async (latitude: number, longitude: number, radius?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'latitude' is not null or undefined
            assertParamExists('getNearbyStations', 'latitude', latitude)
            // verify required parameter 'longitude' is not null or undefined
            assertParamExists('getNearbyStations', 'longitude', longitude)
            const localVarPath = `/stations/nearby`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (latitude !== undefined) {
                localVarQueryParameter['latitude'] = latitude;
            }

            if (longitude !== undefined) {
                localVarQueryParameter['longitude'] = longitude;
            }

            if (radius !== undefined) {
                localVarQueryParameter['radius'] = radius;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定されたステーションにアップロードされた写真のURLリストを取得します。
         * @summary ステーションの写真URLを取得
         * @param {string} stationId 写真URLを取得するステーションのID。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStationPhotosURL: async (stationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'stationId' is not null or undefined
            assertParamExists('getStationPhotosURL', 'stationId', stationId)
            const localVarPath = `/stations/{stationId}/photosURL`
                .replace(`{${"stationId"}}`, encodeURIComponent(String(stationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * RedチームとGreenチームのemojiとお題、そして全体のお知らせを取得します。
         * @summary 利用可能なチームの情報を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamsInfo: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/teams`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定されたステーションに対して写真をアップロードします。
         * @summary ステーションの写真をアップロード
         * @param {string} stationId 写真をアップロードするステーションのID。
         * @param {File} [photo] アップロードする写真ファイル。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postStationPhoto: async (stationId: string, photo?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'stationId' is not null or undefined
            assertParamExists('postStationPhoto', 'stationId', stationId)
            const localVarPath = `/stations/{stationId}/photo`
                .replace(`{${"stationId"}}`, encodeURIComponent(String(stationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (photo !== undefined) { 
                localVarFormParams.append('photo', photo as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定されたステーションに対してRedチームまたはGreenチームに投票します。
         * @summary ステーションに対するチーム投票
         * @param {string} stationId 投票するステーションのID。
         * @param {PostStationVoteRequest} postStationVoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postStationVote: async (stationId: string, postStationVoteRequest: PostStationVoteRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'stationId' is not null or undefined
            assertParamExists('postStationVote', 'stationId', stationId)
            // verify required parameter 'postStationVoteRequest' is not null or undefined
            assertParamExists('postStationVote', 'postStationVoteRequest', postStationVoteRequest)
            const localVarPath = `/stations/{stationId}/vote`
                .replace(`{${"stationId"}}`, encodeURIComponent(String(stationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postStationVoteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 指定された場所の周辺にあるステーションの座標を返します。
         * @summary 周辺のステーションの座標を取得
         * @param {number} latitude 現在の場所の緯度。
         * @param {number} longitude 現在の場所の経度。
         * @param {number} [radius] ステーションを検索する半径（メートル単位）。デフォルトは1000メートルです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNearbyStations(latitude: number, longitude: number, radius?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StationInformation>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNearbyStations(latitude, longitude, radius, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getNearbyStations']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 指定されたステーションにアップロードされた写真のURLリストを取得します。
         * @summary ステーションの写真URLを取得
         * @param {string} stationId 写真URLを取得するステーションのID。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStationPhotosURL(stationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PhotosURLResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStationPhotosURL(stationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getStationPhotosURL']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * RedチームとGreenチームのemojiとお題、そして全体のお知らせを取得します。
         * @summary 利用可能なチームの情報を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTeamsInfo(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTeamsInfo(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getTeamsInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 指定されたステーションに対して写真をアップロードします。
         * @summary ステーションの写真をアップロード
         * @param {string} stationId 写真をアップロードするステーションのID。
         * @param {File} [photo] アップロードする写真ファイル。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postStationPhoto(stationId: string, photo?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PhotoUploadResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postStationPhoto(stationId, photo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.postStationPhoto']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 指定されたステーションに対してRedチームまたはGreenチームに投票します。
         * @summary ステーションに対するチーム投票
         * @param {string} stationId 投票するステーションのID。
         * @param {PostStationVoteRequest} postStationVoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postStationVote(stationId: string, postStationVoteRequest: PostStationVoteRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StationInformation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postStationVote(stationId, postStationVoteRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.postStationVote']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 指定された場所の周辺にあるステーションの座標を返します。
         * @summary 周辺のステーションの座標を取得
         * @param {number} latitude 現在の場所の緯度。
         * @param {number} longitude 現在の場所の経度。
         * @param {number} [radius] ステーションを検索する半径（メートル単位）。デフォルトは1000メートルです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNearbyStations(latitude: number, longitude: number, radius?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<StationInformation>> {
            return localVarFp.getNearbyStations(latitude, longitude, radius, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定されたステーションにアップロードされた写真のURLリストを取得します。
         * @summary ステーションの写真URLを取得
         * @param {string} stationId 写真URLを取得するステーションのID。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStationPhotosURL(stationId: string, options?: RawAxiosRequestConfig): AxiosPromise<PhotosURLResponse> {
            return localVarFp.getStationPhotosURL(stationId, options).then((request) => request(axios, basePath));
        },
        /**
         * RedチームとGreenチームのemojiとお題、そして全体のお知らせを取得します。
         * @summary 利用可能なチームの情報を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamsInfo(options?: RawAxiosRequestConfig): AxiosPromise<TeamsResponse> {
            return localVarFp.getTeamsInfo(options).then((request) => request(axios, basePath));
        },
        /**
         * 指定されたステーションに対して写真をアップロードします。
         * @summary ステーションの写真をアップロード
         * @param {string} stationId 写真をアップロードするステーションのID。
         * @param {File} [photo] アップロードする写真ファイル。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postStationPhoto(stationId: string, photo?: File, options?: RawAxiosRequestConfig): AxiosPromise<PhotoUploadResponse> {
            return localVarFp.postStationPhoto(stationId, photo, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定されたステーションに対してRedチームまたはGreenチームに投票します。
         * @summary ステーションに対するチーム投票
         * @param {string} stationId 投票するステーションのID。
         * @param {PostStationVoteRequest} postStationVoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postStationVote(stationId: string, postStationVoteRequest: PostStationVoteRequest, options?: RawAxiosRequestConfig): AxiosPromise<StationInformation> {
            return localVarFp.postStationVote(stationId, postStationVoteRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 指定された場所の周辺にあるステーションの座標を返します。
     * @summary 周辺のステーションの座標を取得
     * @param {number} latitude 現在の場所の緯度。
     * @param {number} longitude 現在の場所の経度。
     * @param {number} [radius] ステーションを検索する半径（メートル単位）。デフォルトは1000メートルです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getNearbyStations(latitude: number, longitude: number, radius?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getNearbyStations(latitude, longitude, radius, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定されたステーションにアップロードされた写真のURLリストを取得します。
     * @summary ステーションの写真URLを取得
     * @param {string} stationId 写真URLを取得するステーションのID。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getStationPhotosURL(stationId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getStationPhotosURL(stationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * RedチームとGreenチームのemojiとお題、そして全体のお知らせを取得します。
     * @summary 利用可能なチームの情報を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTeamsInfo(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getTeamsInfo(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定されたステーションに対して写真をアップロードします。
     * @summary ステーションの写真をアップロード
     * @param {string} stationId 写真をアップロードするステーションのID。
     * @param {File} [photo] アップロードする写真ファイル。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postStationPhoto(stationId: string, photo?: File, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postStationPhoto(stationId, photo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定されたステーションに対してRedチームまたはGreenチームに投票します。
     * @summary ステーションに対するチーム投票
     * @param {string} stationId 投票するステーションのID。
     * @param {PostStationVoteRequest} postStationVoteRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postStationVote(stationId: string, postStationVoteRequest: PostStationVoteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postStationVote(stationId, postStationVoteRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



